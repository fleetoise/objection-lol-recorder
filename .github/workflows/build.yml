name: Build and Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version'
        required: true
        default: '1.0.0'
      prerelease:
        description: 'Is this a prerelease?'
        type: boolean
        default: false

permissions:
  contents: write

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Set version number
        run: |
          CURRENT_VERSION=$(npm run version --silent)
          TARGET_VERSION="${{ github.event.inputs.version }}"
          if [ "$CURRENT_VERSION" != "$TARGET_VERSION" ]; then
            npm run set-version $TARGET_VERSION
          fi
        shell: bash

      - name: Build Vite output
        run: npm run package

      - name: Package Windows app
        run: npm run make

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-artifacts
          path: out/make/**/x64/*

  build-linux:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install system packages required for AppImage
        run: |
          sudo apt-get update
          sudo apt-get install -y libfuse2 fakeroot rpm dpkg xz-utils cpio

      - name: Install dependencies
        run: npm ci

      - name: Set version number
        run: |
          CURRENT_VERSION=$(npm run version --silent)
          TARGET_VERSION="${{ github.event.inputs.version }}"
          if [ "$CURRENT_VERSION" != "$TARGET_VERSION" ]; then
            npm run set-version $TARGET_VERSION
          fi
        shell: bash

      - name: Build Vite output
        run: npm run package

      - name: Build Linux AppImage (electron-builder)
        run: npx electron-builder --linux AppImage --x64 --publish never

      - name: Upload Linux AppImage artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-artifacts
          path: dist/*.AppImage

  release:
    needs: [build-windows, build-linux]
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release files
        run: |
          mkdir release
          # Windows ZIP
          cd artifacts/windows-artifacts
          zip -r ../../release/objection-lol-recorder-v${{ github.event.inputs.version }}-windows.zip .
          cd ../../
          # Linux AppImage
          cp artifacts/linux-artifacts/*.AppImage release/objection-lol-recorder-v${{ github.event.inputs.version }}.AppImage

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.event.inputs.version }}
          name: Release v${{ github.event.inputs.version }}
          draft: true
          prerelease: ${{ github.event.inputs.prerelease }}
          files: release/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
